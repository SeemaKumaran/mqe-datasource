{"version":3,"sources":["../src/query_builder.js"],"names":[],"mappings":";;;;;;;;;;;;;AA8EA,WAAS,IAAT,CAAc,GAAd,EAAmB;AACjB,QAAI,YAAY,mBAAhB;AACA,QAAI,QAAQ,IAAI,KAAJ,CAAU,SAAV,CAAZ;AACA,WAAO,QAAQ,MAAM,CAAN,CAAR,GAAmB,KAA1B;AACD;;;AAlFM,O;;;;;;;;;;;;;;;;;;;;;AAEc,c;;AAEnB;;AACA,0BAAY,MAAZ,EAAoB,WAApB,EAAiC,UAAjC,EAA6C;AAAA;;AAC3C,eAAK,MAAL,GAAc,MAAd;AACA,eAAK,WAAL,GAAmB,WAAnB;AACA,eAAK,UAAL,GAAkB,UAAlB;AACD;;AAED;AACA;AACA;;;;iCAEO,Q,EAAU,M,EAAQ,Q,EAAU;AACjC,gBAAI,SAAS,KAAK,MAAlB;AACA,gBAAI,QAAQ,EAAZ;AACA,qBAAS,OAAO,MAAhB;AACA,gBAAI,OAAO,YAAP,CAAoB,MAAxB,EAAgC;AAC9B,uBAAS,YAAY,KAAK,kBAAL,CAAwB,OAAO,YAA/B,CAArB;AACD;AACD,oBAAQ,SAAS,YAAT,CAAsB,KAAtB,EAA6B,QAA7B,EAAuC,MAAvC,CAAR;AACA,mBAAO,KAAP;AACD;;;6CAEkB,Y,EAAc;AAAA;;AAC/B,gBAAI,kBAAkB,EAAE,GAAF,CAAM,YAAN,EAAoB,UAAC,SAAD,EAAY,KAAZ,EAAsB;AAC9D,kBAAI,WAAW,EAAf;AACA,kBAAI,UAAU,CAAd,EAAiB;AACf,4BAAY,UAAU,SAAV,GAAsB,GAAlC;AACD;;AAED;AACA,kBAAI,KAAJ;AACA,kBAAI,EAAE,QAAF,CAAW,UAAU,KAArB,KACA,MAAK,gBAAL,CAAsB,UAAU,KAAhC,CADJ,EAC4C;AAC1C,wBAAQ,UAAU,KAAlB;AACD,eAHD,MAGO;AACL,wBAAQ,MAAM,UAAU,KAAhB,GAAwB,GAAhC;AACD;AACD,0BAAY,UAAU,MAAV,GAAmB,GAAnB,GAAyB,UAAU,QAAnC,GAA8C,GAA9C,GAAoD,KAAhE;AACA,qBAAO,QAAP;AACD,aAhBqB,CAAtB;AAiBA,mBAAO,gBAAgB,IAAhB,CAAqB,GAArB,CAAP;AACD;;;2CAGgB,G,EAAK;AACpB,gBAAI,YAAY,EAAE,GAAF,CAAM,KAAK,WAAL,CAAiB,SAAvB,EAAkC,MAAlC,CAAhB;AACA,gBAAI,OAAO,IAAX;AACA,mBAAO,EAAE,IAAF,CAAO,SAAP,EAAkB,oBAAY;AACnC,qBAAO,KAAK,WAAL,CAAiB,gBAAjB,CAAkC,GAAlC,EAAuC,QAAvC,CAAP;AACD,aAFM,CAAP;AAGD;;;uCAMmB;AAClB,gBAAI,QAAQ,cAAZ;AACA,mBAAO,KAAP;AACD;;;qCAEiB,M,EAAQ;AACxB,mBAAO,cAAc,MAArB;AACD;;;uCAEmB,K,EAAO,Q,EAAU,M,EAAQ,Q,EAAU;AACrD,gBAAI,iBAAiB,UAArB;AACA,gBAAG,CAAC,eAAe,IAAf,CAAoB,KAApB,CAAJ,EAAgC;AAC9B,sBAAQ,KAAK,KAAL,IAAc,QAAd,GAAyB,QAAzB,GAAoC,MAApC,GAA6C,MAArD;AACD;AACD,mBAAO,KAAP;AACD;;;;;;yBAzEkB,Q","file":"query_builder.js","sourcesContent":["import _ from 'lodash';\n\nexport default class MQEQuery {\n\n  /** @ngInject */\n  constructor(target, templateSrv, scopedVars) {\n    this.target = target;\n    this.templateSrv = templateSrv;\n    this.scopedVars = scopedVars;\n  }\n\n  /////////////////////\n  // Query Rendering //\n  /////////////////////\n\n  render(timeFrom, timeTo, interval) {\n    var target = this.target;\n    var query = \"\";\n    query += target.metric;\n    if (target.whereClauses.length) {\n      query += \" where \" + this.renderWhereClauses(target.whereClauses);\n    }\n    query = MQEQuery.addTimeRange(query, timeFrom, timeTo);\n    return query;\n  }\n\n  renderWhereClauses(whereClauses) {\n    var renderedClauses = _.map(whereClauses, (clauseObj, index) => {\n      var rendered = \"\";\n      if (index !== 0) {\n        rendered += clauseObj.condition + \" \";\n      }\n\n      // Put non-numeric values into quotes.\n      var value;\n      if (_.isNumber(clauseObj.value) ||\n          this.containsVariable(clauseObj.value)) {\n        value = clauseObj.value;\n      } else {\n        value = \"'\" + clauseObj.value + \"'\";\n      }\n      rendered += clauseObj.column + ' ' + clauseObj.operator + ' ' + value;\n      return rendered;\n    });\n    return renderedClauses.join(' ');\n  }\n\n  // Check for template variables\n  containsVariable(str) {\n    var variables = _.map(this.templateSrv.variables, 'name');\n    var self = this;\n    return _.some(variables, variable => {\n      return self.templateSrv.containsVariable(str, variable);\n    });\n  }\n\n  ////////////////////\n  // Static methods //\n  ////////////////////\n\n  static getMetrics() {\n    var query = \"describe all\";\n    return query;\n  }\n\n  static getColumns(metric) {\n    return \"describe \" + metric;\n  }\n\n  static addTimeRange(query, timeFrom, timeTo, interval) {\n    var timeRangeRegex = /from.*to/;\n    if(!timeRangeRegex.test(query)) {\n      query = trim(query) + \" from \" + timeFrom + \" to \" + timeTo;\n    }\n    return query;\n  }\n}\n\nfunction trim(str) {\n  var trimRegex = /^[\\s]*(.*?)[\\s]*$/;\n  var match = str.match(trimRegex);\n  return match ? match[0] : match;\n}\n"]}