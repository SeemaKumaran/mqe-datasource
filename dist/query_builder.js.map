{"version":3,"sources":["../src/query_builder.js"],"names":[],"mappings":";;;;;;;;;;;;;AAkJA,WAAS,gBAAT,CAA0B,GAA1B,EAA+B;AAC7B,QAAI,gBAAgB,IAApB;AACA,WAAO,cAAc,IAAd,CAAmB,GAAnB,CAAP;AACD;;AAED,WAAS,aAAT,CAAuB,GAAvB,EAA4B,OAA5B,EAAqC;AACnC,UAAM,IAAI,OAAJ,CAAY,KAAZ,EAAmB,MAAnB,CAAN;AACA,QAAI,cAAc,IAAI,MAAJ,CAAW,IAAI,OAAJ,CAAY,GAAZ,EAAiB,IAAjB,CAAX,EAAmC,GAAnC,CAAlB;AACA,WAAO,EAAE,MAAF,CAAS,OAAT,EAAkB,kBAAU;AACjC,aAAO,OAAO,MAAP,CAAc,WAAd,MAA+B,CAAC,CAAvC;AACD,KAFM,CAAP;AAGD;;AAED,WAAS,IAAT,CAAc,GAAd,EAAmB;AACjB,QAAI,YAAY,mBAAhB;AACA,QAAI,QAAQ,IAAI,KAAJ,CAAU,SAAV,CAAZ;AACA,WAAO,QAAQ,MAAM,CAAN,CAAR,GAAmB,KAA1B;AACD;;AAED,WAAS,yBAAT,CAAmC,WAAnC,EAAgD,MAAhD,EAAwD;AACtD,QAAI,SAAS,gBAAgB,WAAhB,EAA6B,MAA7B,CAAb;AACA,WAAO,YAAY,MAAZ,EAAoB,WAAW,MAAX,CAApB,CAAP;AACD;;AAED,WAAS,eAAT,CAAyB,WAAzB,EAAsC,MAAtC,EAA8C;AAC5C,QAAI,eAAe,YAAY,OAAZ,CAAoB,KAApB,EAA2B,MAA3B,CAAnB;AACA,QAAI,cAAc,IAAI,MAAJ,CAAW,aAAa,OAAb,CAAqB,GAArB,EAA0B,MAA1B,CAAX,CAAlB;AACA,QAAI,SAAS,YAAY,IAAZ,CAAiB,MAAjB,CAAb;AACA,WAAO,OAAO,CAAP,CAAP;AACD;;AAED,WAAS,WAAT,CAAqB,KAArB,EAA4B,MAA5B,EAAoC;AAClC,WAAO,SAAS,IAAT,GAAgB,KAAhB,GAAwB,GAA/B;AACD;;AAED;AACA,WAAS,UAAT,CAAoB,MAApB,EAA4B;AAC1B,WAAO,MAAM,MAAN,GAAe,GAAtB;AACD;;AAED,WAAS,OAAT,CAAiB,GAAjB,EAAsB;AACpB,WAAO,MAAM,GAAN,GAAY,GAAnB;AACD;;AAED;AACA;AACA;AACA;AACA,WAAS,eAAT,CAAyB,KAAzB,EAAgC,MAAhC,EAAwC,QAAxC,EAAkD;AAChD,QAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AAC7B,aAAO,KAAP;AACD;AACD,WAAO,MAAM,IAAN,CAAW,MAAX,CAAP;AACD;;;AAvMM,O;;;;;;;;;;;;;;;;;;;;;AAEc,c;;AAEnB;;AACA,0BAAY,MAAZ,EAAoB,WAApB,EAAiC,UAAjC,EAA6C;AAAA;;AAC3C,eAAK,MAAL,GAAc,MAAd;AACA,eAAK,WAAL,GAAmB,WAAnB;AACA;AACA,eAAK,UAAL,GAAkB,UAAlB;AACD;;AAED;AACA;AACA;;;;iCAEO,U,EAAY,Q,EAAU,M,EAAQ,Q,EAAU;AAAA;;AAC7C,gBAAI,SAAS,KAAK,MAAlB;AACA,gBAAI,UAAU,EAAd;;AAF6C;AAAA;AAAA;;AAAA;AAI7C,mCAAc,OAAO,OAArB,8HAA8B;AAAA,oBAArB,CAAqB;;AAC5B,oBAAI,SAAS,EAAE,MAAf;AACA,oBAAI,MAAJ,EAAY;AACV,sBAAI,iBAAiB,MAAjB,CAAJ,EAA8B;AAC5B,wBAAI,kBAAkB,cAAc,MAAd,EAAsB,UAAtB,CAAtB;;AAEA;AACA,wBAAI,EAAE,KAAN,EAAa;AACX,0BAAI,iBAAiB,EAAE,KAAnB,CAAJ,EAA+B;AAC7B;AACA;AACA,0CAAkB,EAAE,GAAF,CAAM,eAAN,EAChB,EAAE,OAAF,CAAU,yBAAV,EAAqC,MAArC,CADgB,CAAlB;AAED,uBALD,MAKO;AACL,0CAAkB,EAAE,GAAF,CAAM,eAAN,EAChB,EAAE,OAAF,CAAU,EAAE,OAAF,CAAU,WAAV,EAAuB,EAAE,KAAzB,CAAV,EAA2C,UAA3C,CADgB,CAAlB;AAED;AACF,qBAVD,MAUO;AACL,wCAAkB,EAAE,GAAF,CAAM,eAAN,EAAuB,UAAvB,CAAlB;AACD;;AAED,8BAAU,QAAQ,MAAR,CAAe,eAAf,CAAV;AACD,mBAnBD,MAmBO;AACL,6BAAS,WAAW,MAAX,CAAT;;AAEA;AACA,wBAAI,EAAE,KAAN,EAAa;AACX,+BAAS,YAAY,EAAE,KAAd,EAAqB,MAArB,CAAT;AACD;;AAED,8BAAU,QAAQ,MAAR,CAAe,MAAf,CAAV;AACD;AACF;AACF;AArC4C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAsC7C,sBAAU,EAAE,IAAF,CAAO,OAAP,CAAV;;AAEA,mBAAO,EAAE,GAAF,CAAM,OAAN,EAAe,kBAAU;AAC9B,kBAAI,QAAQ,EAAZ;;AAEA;AACA,kBAAI,sBAAsB,MAAK,WAAL,CAAiB,WAA3C;AACA,oBAAK,WAAL,CAAiB,WAAjB,GAA+B,eAA/B;AACA,uBAAS,MAAK,WAAL,CAAiB,OAAjB,CAAyB,MAAzB,EAAiC,MAAK,UAAtC,CAAT;;AAEA;AACA,oBAAK,WAAL,CAAiB,WAAjB,GAA+B,mBAA/B;;AAEA,uBAAS,MAAT;;AAEA;AACA,uBAAS,MAAK,WAAL,CAAiB,OAAO,IAAxB,EAA8B,OAAO,KAArC,CAAT;;AAEA,sBAAQ,SAAS,YAAT,CAAsB,KAAtB,EAA6B,QAA7B,EAAuC,MAAvC,CAAR;AACA,qBAAO,KAAP;AACD,aAlBM,CAAP;AAmBD;;;sCAEW,I,EAAM,K,EAAO;AACvB,gBAAI,QAAQ,EAAZ;AACA,gBAAI,KAAK,MAAL,IAAe,MAAM,MAAzB,EAAiC;AAC/B,uBAAS,SAAT;AACA,kBAAI,KAAK,MAAT,EAAiB;AACf,yBAAS,aAAa,EAAE,GAAF,CAAM,IAAN,EAAY,OAAZ,EAAqB,IAArB,CAA0B,IAA1B,CAAb,GAA+C,GAAxD;AACA,oBAAI,MAAM,MAAV,EAAmB;AACjB,2BAAS,OAAT;AACD;AACF;AACD,kBAAI,MAAM,MAAV,EAAkB;AAChB,yBAAS,cAAc,EAAE,GAAF,CAAM,KAAN,EAAa,OAAb,EAAsB,IAAtB,CAA2B,IAA3B,CAAd,GAAiD,GAA1D;AACD;AACF;AACD,mBAAO,KAAP;AACD;;;6CAEkB,Y,EAAc;AAAA;;AAC/B,gBAAI,kBAAkB,EAAE,GAAF,CAAM,YAAN,EAAoB,UAAC,SAAD,EAAY,KAAZ,EAAsB;AAC9D,kBAAI,WAAW,EAAf;AACA,kBAAI,UAAU,CAAd,EAAiB;AACf,4BAAY,UAAU,SAAV,GAAsB,GAAlC;AACD;;AAED;AACA,kBAAI,KAAJ;AACA,kBAAI,EAAE,QAAF,CAAW,UAAU,KAArB,KACA,OAAK,gBAAL,CAAsB,UAAU,KAAhC,CADJ,EAC4C;AAC1C,wBAAQ,UAAU,KAAlB;AACD,eAHD,MAGO;AACL,wBAAQ,MAAM,UAAU,KAAhB,GAAwB,GAAhC;AACD;AACD,0BAAY,UAAU,MAAV,GAAmB,GAAnB,GAAyB,UAAU,QAAnC,GAA8C,GAA9C,GAAoD,KAAhE;AACA,qBAAO,QAAP;AACD,aAhBqB,CAAtB;AAiBA,mBAAO,gBAAgB,IAAhB,CAAqB,GAArB,CAAP;AACD;;;2CAGgB,G,EAAK;AACpB,gBAAI,YAAY,EAAE,GAAF,CAAM,KAAK,WAAL,CAAiB,SAAvB,EAAkC,MAAlC,CAAhB;AACA,gBAAI,OAAO,IAAX;AACA,mBAAO,EAAE,IAAF,CAAO,SAAP,EAAkB,oBAAY;AACnC,qBAAO,KAAK,WAAL,CAAiB,gBAAjB,CAAkC,GAAlC,EAAuC,QAAvC,CAAP;AACD,aAFM,CAAP;AAGD;;;uCAMmB;AAClB,gBAAI,QAAQ,cAAZ;AACA,mBAAO,KAAP;AACD;;;qCAEiB,M,EAAQ;AACxB,mBAAO,cAAc,MAArB;AACD;;;uCAEmB,K,EAAO,Q,EAAU,M,EAAQ,Q,EAAU;AACrD,gBAAI,iBAAiB,UAArB;AACA,gBAAG,CAAC,eAAe,IAAf,CAAoB,KAApB,CAAJ,EAAgC;AAC9B,sBAAQ,KAAK,KAAL,IAAc,QAAd,GAAyB,QAAzB,GAAoC,MAApC,GAA6C,MAArD;AACD;AACD,mBAAO,KAAP;AACD;;;;;;yBA7IkB,Q","file":"query_builder.js","sourcesContent":["import _ from 'lodash';\n\nexport default class MQEQuery {\n\n  /** @ngInject */\n  constructor(target, templateSrv, scopedVars) {\n    this.target = target;\n    this.templateSrv = templateSrv;\n    // this.templateSrv.formatValue = formatMQEMetric;\n    this.scopedVars = scopedVars;\n  }\n\n  /////////////////////\n  // Query Rendering //\n  /////////////////////\n\n  render(metricList, timeFrom, timeTo, interval) {\n    let target = this.target;\n    let metrics = [];\n\n    for (let m of target.metrics) {\n      let metric = m.metric;\n      if (metric) {\n        if (containsWildcard(metric)) {\n          let filteredMetrics = filterMetrics(metric, metricList);\n\n          // Add alias\n          if (m.alias) {\n            if (containsWildcard(m.alias)) {\n              // Set whildcard part as metric alias\n              // query: os.cpu.* alias: * -> metric: os.cpu.system -> alias: system\n              filteredMetrics = _.map(filteredMetrics,\n                _.partial(convertMetricWithWildcard, metric));\n            } else {\n              filteredMetrics = _.map(filteredMetrics,\n                _.compose(_.partial(addMQEAlias, m.alias), wrapMetric));\n            }\n          } else {\n            filteredMetrics = _.map(filteredMetrics, wrapMetric);\n          }\n\n          metrics = metrics.concat(filteredMetrics);\n        } else {\n          metric = wrapMetric(metric);\n\n          // Add alias\n          if (m.alias) {\n            metric = addMQEAlias(m.alias, metric);\n          }\n\n          metrics = metrics.concat(metric);\n        }\n      }\n    }\n    metrics = _.uniq(metrics);\n\n    return _.map(metrics, metric => {\n      let query = \"\";\n\n      // Set custom metric format function\n      let formatValueOriginal = this.templateSrv.formatValue;\n      this.templateSrv.formatValue = formatMQEMetric;\n      metric = this.templateSrv.replace(metric, this.scopedVars);\n\n      // Set original format function\n      this.templateSrv.formatValue = formatValueOriginal;\n\n      query += metric;\n\n      // Render apps and hosts\n      query += this.renderWhere(target.apps, target.hosts);\n\n      query = MQEQuery.addTimeRange(query, timeFrom, timeTo);\n      return query;\n    });\n  }\n\n  renderWhere(apps, hosts) {\n    let query = \"\";\n    if (apps.length || hosts.length) {\n      query += \" where \";\n      if (apps.length) {\n        query += \"app in (\" + _.map(apps, wrapTag).join(', ') + \")\";\n        if (hosts.length)  {\n          query += \" and \";\n        }\n      }\n      if (hosts.length) {\n        query += \"host in (\" + _.map(hosts, wrapTag).join(', ') + \")\";\n      }\n    }\n    return query;\n  }\n\n  renderWhereClauses(whereClauses) {\n    var renderedClauses = _.map(whereClauses, (clauseObj, index) => {\n      var rendered = \"\";\n      if (index !== 0) {\n        rendered += clauseObj.condition + \" \";\n      }\n\n      // Put non-numeric values into quotes.\n      var value;\n      if (_.isNumber(clauseObj.value) ||\n          this.containsVariable(clauseObj.value)) {\n        value = clauseObj.value;\n      } else {\n        value = \"'\" + clauseObj.value + \"'\";\n      }\n      rendered += clauseObj.column + ' ' + clauseObj.operator + ' ' + value;\n      return rendered;\n    });\n    return renderedClauses.join(' ');\n  }\n\n  // Check for template variables\n  containsVariable(str) {\n    var variables = _.map(this.templateSrv.variables, 'name');\n    var self = this;\n    return _.some(variables, variable => {\n      return self.templateSrv.containsVariable(str, variable);\n    });\n  }\n\n  ////////////////////\n  // Static methods //\n  ////////////////////\n\n  static getMetrics() {\n    var query = \"describe all\";\n    return query;\n  }\n\n  static getColumns(metric) {\n    return \"describe \" + metric;\n  }\n\n  static addTimeRange(query, timeFrom, timeTo, interval) {\n    var timeRangeRegex = /from.*to/;\n    if(!timeRangeRegex.test(query)) {\n      query = trim(query) + \" from \" + timeFrom + \" to \" + timeTo;\n    }\n    return query;\n  }\n}\n\nfunction containsWildcard(str) {\n  var wildcardRegex = /\\*/;\n  return wildcardRegex.test(str);\n}\n\nfunction filterMetrics(str, metrics) {\n  str = str.replace(/\\./g, '\\\\\\.');\n  let filterRegex = new RegExp(str.replace('*', '.*'), 'g');\n  return _.filter(metrics, metric => {\n    return metric.search(filterRegex) !== -1;\n  });\n}\n\nfunction trim(str) {\n  var trimRegex = /^[\\s]*(.*?)[\\s]*$/;\n  var match = str.match(trimRegex);\n  return match ? match[0] : match;\n}\n\nfunction convertMetricWithWildcard(metricQuery, metric) {\n  let suffix = getMetricSuffix(metricQuery, metric);\n  return addMQEAlias(suffix, wrapMetric(metric));\n}\n\nfunction getMetricSuffix(metricQuery, metric) {\n  let metricPrefix = metricQuery.replace(/\\./g, '\\\\\\.');\n  let suffixRegex = new RegExp(metricPrefix.replace('*', '(.*)'));\n  let suffix = suffixRegex.exec(metric);\n  return suffix[1];\n}\n\nfunction addMQEAlias(alias, metric) {\n  return metric + \" {\" + alias + \"}\";\n}\n\n// Wrap metric with ``: os.cpu.user -> `os.cpu.user`\nfunction wrapMetric(metric) {\n  return '`' + metric + '`';\n}\n\nfunction wrapTag(tag) {\n  return \"'\" + tag + \"'\";\n}\n\n// Special value formatter for MQE metric.\n// Render multi-value variables for using with metric template:\n// $metric => ('os.cpu.user', 'os.cpu.system')\n// select `$metric` => select `os.cpu.user`, `os.cpu.system`\nfunction formatMQEMetric(value, format, variable) {\n  if (typeof value === 'string') {\n    return value;\n  }\n  return value.join(\"`, `\");\n}\n"]}