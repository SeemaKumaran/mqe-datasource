{"version":3,"sources":["../src/query_builder.js"],"names":["containsWildcard","str","wildcardRegex","test","filterMetrics","metrics","replace","filterRegex","RegExp","_","filter","metric","search","trim","trimRegex","match","convertMetricWithWildcard","metricQuery","suffix","getMetricSuffix","addMQEAlias","wrapMetric","metricPrefix","suffixRegex","exec","alias","MQEQuery","target","templateSrv","scopedVars","metricList","timeFrom","timeTo","interval","m","filteredMetrics","map","partial","compose","concat","uniq","query","renderWhere","apps","hosts","addTimeRange","length","app","join","host","whereClauses","renderedClauses","clauseObj","index","rendered","condition","value","isNumber","containsVariable","column","operator","variables","self","some","variable","timeRangeRegex"],"mappings":"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","file":"query_builder.js","sourcesContent":["import _ from 'lodash';\n\nexport default class MQEQuery {\n\n  /** @ngInject */\n  constructor(target, templateSrv, scopedVars) {\n    this.target = target;\n    this.templateSrv = templateSrv;\n    this.scopedVars = scopedVars;\n  }\n\n  /////////////////////\n  // Query Rendering //\n  /////////////////////\n\n  render(metricList, timeFrom, timeTo, interval) {\n    let target = this.target;\n    let metrics = [];\n\n    for (let m of target.metrics) {\n      let metric = m.metric;\n      if (metric) {\n        if (containsWildcard(metric)) {\n          let filteredMetrics = filterMetrics(metric, metricList);\n\n          // Add alias\n          if (m.alias) {\n            if (containsWildcard(m.alias)) {\n              // Set whildcard part as metric alias\n              // query: os.cpu.* alias: * -> metric: os.cpu.system -> alias: system\n              filteredMetrics = _.map(filteredMetrics,\n                _.partial(convertMetricWithWildcard, metric));\n            } else {\n              filteredMetrics = _.map(filteredMetrics,\n                _.compose(_.partial(addMQEAlias, m.alias), wrapMetric));\n            }\n          } else {\n            filteredMetrics = _.map(filteredMetrics, wrapMetric);\n          }\n\n          metrics = metrics.concat(filteredMetrics);\n        } else {\n          metric = wrapMetric(metric);\n\n          // Add alias\n          if (m.alias) {\n            metric = addMQEAlias(m.alias, metric);\n          }\n\n          metrics = metrics.concat(metric);\n        }\n      }\n    }\n    metrics = _.uniq(metrics);\n\n    return _.map(metrics, metric => {\n      let query = \"\";\n      query += metric;\n\n      // Render apps and hosts\n      query += this.renderWhere(target.apps, target.hosts);\n\n      query = MQEQuery.addTimeRange(query, timeFrom, timeTo);\n      return query;\n    });\n  }\n\n  renderWhere(apps, hosts) {\n    let query = \"\";\n    if (apps.length || hosts.length) {\n      query += \" where \";\n      if (apps.length) {\n        query += \"app in (\" + _.map(apps, app => {\n          return \"'\" + app + \"'\";\n        }).join(', ') + \")\";\n        if (hosts.length)  {\n          query += \" and \";\n        }\n      }\n      if (hosts.length) {\n        query += \"host in (\" + _.map(hosts, host => {\n          return \"'\" + host + \"'\";\n        }).join(', ') + \")\";\n      }\n    }\n    return query;\n  }\n\n  renderWhereClauses(whereClauses) {\n    var renderedClauses = _.map(whereClauses, (clauseObj, index) => {\n      var rendered = \"\";\n      if (index !== 0) {\n        rendered += clauseObj.condition + \" \";\n      }\n\n      // Put non-numeric values into quotes.\n      var value;\n      if (_.isNumber(clauseObj.value) ||\n          this.containsVariable(clauseObj.value)) {\n        value = clauseObj.value;\n      } else {\n        value = \"'\" + clauseObj.value + \"'\";\n      }\n      rendered += clauseObj.column + ' ' + clauseObj.operator + ' ' + value;\n      return rendered;\n    });\n    return renderedClauses.join(' ');\n  }\n\n  // Check for template variables\n  containsVariable(str) {\n    var variables = _.map(this.templateSrv.variables, 'name');\n    var self = this;\n    return _.some(variables, variable => {\n      return self.templateSrv.containsVariable(str, variable);\n    });\n  }\n\n  ////////////////////\n  // Static methods //\n  ////////////////////\n\n  static getMetrics() {\n    var query = \"describe all\";\n    return query;\n  }\n\n  static getColumns(metric) {\n    return \"describe \" + metric;\n  }\n\n  static addTimeRange(query, timeFrom, timeTo, interval) {\n    var timeRangeRegex = /from.*to/;\n    if(!timeRangeRegex.test(query)) {\n      query = trim(query) + \" from \" + timeFrom + \" to \" + timeTo;\n    }\n    return query;\n  }\n}\n\nfunction containsWildcard(str) {\n  var wildcardRegex = /\\*/;\n  return wildcardRegex.test(str);\n}\n\nfunction filterMetrics(str, metrics) {\n  str = str.replace(/\\./g, '\\\\\\.');\n  let filterRegex = new RegExp(str.replace('*', '.*'), 'g');\n  return _.filter(metrics, metric => {\n    return metric.search(filterRegex) !== -1;\n  });\n}\n\nfunction trim(str) {\n  var trimRegex = /^[\\s]*(.*?)[\\s]*$/;\n  var match = str.match(trimRegex);\n  return match ? match[0] : match;\n}\n\nfunction convertMetricWithWildcard(metricQuery, metric) {\n  let suffix = getMetricSuffix(metricQuery, metric);\n  return addMQEAlias(suffix, wrapMetric(metric));\n}\n\nfunction getMetricSuffix(metricQuery, metric) {\n  let metricPrefix = metricQuery.replace(/\\./g, '\\\\\\.');\n  let suffixRegex = new RegExp(metricPrefix.replace('*', '(.*)'));\n  let suffix = suffixRegex.exec(metric);\n  return suffix[1];\n}\n\nfunction addMQEAlias(alias, metric) {\n  return metric + \" {\" + alias + \"}\";\n}\n\n// Wrap metric with ``: os.cpu.user -> `os.cpu.user`\nfunction wrapMetric(metric) {\n  return '`' + metric + '`';\n}\n"]}