{"version":3,"sources":["../src/datasource.js"],"names":[],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from 'lodash';\nimport * as dateMath from 'app/core/utils/datemath';\nimport MQEQuery from './query_builder';\nimport * as response_handler from './response_handler';\n\nexport class MQEDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.$q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    // this.templateSrv.formatValue = formatMQEValue;\n  }\n\n  // Called once per panel (graph)\n  query(options) {\n    var timeFrom = Math.ceil(dateMath.parse(options.range.from));\n    var timeTo = Math.ceil(dateMath.parse(options.range.to));\n    var mqeQuery;\n\n    var queries = _.map(options.targets, target => {\n      if (target.hide || (target.rawQuery && !target.query)) {\n        return [];\n      } else {\n        if (target.rawQuery) {\n          // Use raw query\n          mqeQuery = MQEQuery.addTimeRange(target.query, timeFrom, timeTo);\n        } else {\n          // Build query\n          var queryModel = new MQEQuery(target, this.templateSrv, options.scopedVars);\n          mqeQuery = queryModel.render(timeFrom, timeTo, options.interval);\n        }\n\n        mqeQuery = this.templateSrv.replace(mqeQuery);\n        return this._mqe_query(mqeQuery).then(response => {\n          return response_handler.handle_response(target, response);\n        });\n      }\n    });\n    return this.$q.all(_.flatten(queries)).then(result => {\n      return {\n        data: _.flatten(result)\n      };\n    });\n  }\n\n  // Required\n  // Used for testing datasource in datasource configuration pange\n  testDatasource() {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/',\n      method: 'GET'\n    }).then(response => {\n      if (response.status === 200) {\n        return {\n          status: \"success\",\n          message: \"Connected to MQE\",\n          title: \"Success\"\n        };\n      }\n    });\n  }\n\n  metricFindQuery(query) {\n    if (!query) {\n      return this.$q.when([]);\n    }\n\n    query = this.templateSrv.replace(query);\n    return this._mqe_query(query).then(response => {\n      return _.map(_.flatten(response.rows), row => {\n        return {\n          text: row,\n          value: \"'\" + row + \"'\"\n        };\n      });\n    });\n  }\n\n  _mqe_query(query) {\n    var mqe_query = {\n      query: query\n    };\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/query/',\n      data: mqe_query,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => {\n      return response.data;\n    });\n  }\n\n}\n\n// Special value formatter for MQE.\n// Render multi-value variables for using in \"IN\" expression:\n// $host => ('backend01', 'backend02')\n// WHERE host IN $host => WHERE host IN ('backend01', 'backend02')\nfunction formatMQEValue(value, format, variable) {\n  if (typeof value === 'string') {\n    return value;\n  }\n  return '(' + value.join(', ') + ')';\n}\n"]}