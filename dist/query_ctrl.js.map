{"version":3,"sources":["../src/query_ctrl.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAO,a;;AACA,O;;AACC,e,kBAAA,S;;AACD,c;;;;;;;;;;;;;;;;;;;;;8BAEM,Y;;;AAEX,8BAAY,MAAZ,EAAoB,SAApB,EAA+B,EAA/B,EAAmC,YAAnC,EAAiD,WAAjD,EAA+D;AAAA;;AAAA,sGACvD,MADuD,EAC/C,SAD+C;;AAG7D,gBAAK,KAAL,GAAa,MAAb;AACA,gBAAK,EAAL,GAAU,EAAV;AACA,gBAAK,YAAL,GAAoB,YAApB;AACA,gBAAK,WAAL,GAAmB,WAAnB;;AAEA,gBAAK,SAAL,GAAiB,CAAC,GAAD,EAAM,IAAN,EAAY,IAAZ,EAAkB,OAAlB,CAAjB;AACA,gBAAK,aAAL,GAAqB,EAArB;;AAEA,cAAI,kBAAkB;AACpB,sBAAU,EADU;AAEpB,0BAAc;AAFM,WAAtB;AAIA,YAAE,QAAF,CAAW,MAAK,MAAhB,EAAwB,eAAxB;;AAEA,gBAAK,kBAAL,CAAwB,MAAK,MAAL,CAAY,YAApC;AACA,gBAAK,kBAAL,GAA0B,aAAa,UAAb,CAAwB,EAAC,MAAM,IAAP,EAAa,OAAO,cAApB,EAAxB,CAA1B;;AAEA;AACA;AACA,gBAAK,gBAAL,GAAwB,EAAxB;AACA,gBAAK,aAAL;AAvB6D;AAwB9D;;;;yCAEc,K,EAAO;AACpB,mBAAO,KAAK,UAAL,CAAgB,UAAhB,CAA2B,KAA3B,EAAkC,IAAlC,CAAuC,kBAAU;AACtD,qBAAO,OAAO,IAAd;AACD,aAFM,CAAP;AAGD;;;0CAEe;AACd,gBAAI,OAAO,IAAX;AACA,iBAAK,cAAL,CAAoB,SAAS,UAAT,EAApB,EAA2C,IAA3C,CAAgD,mBAAW;AACzD,mBAAK,gBAAL,GAAwB,OAAxB;AACD,aAFD;AAGD;;;6CAIkB;AACjB,iBAAK,SAAL,CAAe,OAAf,GAA0B;AAC3B;;;6CAEkB;AACjB,iBAAK,MAAL,CAAY,QAAZ,GAAuB,CAAC,KAAK,MAAL,CAAY,QAApC;AACD;;;6CAEkB;AACjB,mBAAO,KAAK,MAAL,CAAY,QAAnB;AACD;;;8CAEmB,O,EAAS,K,EAAO;AAClC,iBAAK,aAAL,CAAmB,KAAnB,IAA4B,OAA5B;;AAEA,gBAAI,QAAQ,KAAR,KAAkB,KAAK,kBAAL,CAAwB,KAA9C,EAAqD;AACnD,mBAAK,aAAL,CAAmB,MAAnB,CAA0B,KAA1B,EAAiC,CAAjC;AACA,kBAAI,KAAK,aAAL,CAAmB,MAAnB,KAA8B,CAAlC,EAAqC;AACnC,qBAAK,aAAL,CAAmB,IAAnB,CAAwB,KAAK,YAAL,CAAkB,aAAlB,EAAxB;AACD,eAFD,MAEO,IAAI,KAAK,aAAL,CAAmB,MAAnB,GAA4B,CAAhC,EAAmC;AACxC,qBAAK,aAAL,CAAmB,MAAnB,CAA0B,KAAK,GAAL,CAAS,QAAQ,CAAjB,EAAoB,CAApB,CAA1B,EAAkD,CAAlD;AACA,oBAAI,KAAK,aAAL,CAAmB,KAAK,aAAL,CAAmB,MAAnB,GAA4B,CAA/C,EAAkD,IAAlD,KAA2D,aAA/D,EAA8E;AAC5E,uBAAK,aAAL,CAAmB,IAAnB,CAAwB,KAAK,YAAL,CAAkB,aAAlB,EAAxB;AACD;AACF;AACF,aAVD,MAUO;AACL,kBAAI,QAAQ,IAAR,KAAiB,aAArB,EAAoC;AAClC,oBAAI,QAAQ,CAAZ,EAAe;AACb,uBAAK,aAAL,CAAmB,MAAnB,CAA0B,KAA1B,EAAiC,CAAjC,EAAoC,KAAK,YAAL,CAAkB,YAAlB,CAA+B,KAA/B,CAApC;AACD;AACD,qBAAK,aAAL,CAAmB,IAAnB,CAAwB,KAAK,YAAL,CAAkB,WAAlB,CAA8B,GAA9B,CAAxB;AACA,qBAAK,aAAL,CAAmB,IAAnB,CAAwB,KAAK,YAAL,CAAkB,OAAlB,CAA0B,kBAA1B,EAA8C,OAA9C,EAAuD,qBAAvD,CAAxB;AACA,wBAAQ,IAAR,GAAe,KAAf;AACA,wBAAQ,QAAR,GAAmB,mBAAnB;AACD;AACD,kBAAK,QAAQ,CAAT,KAAgB,KAAK,aAAL,CAAmB,MAAvC,EAA+C;AAC7C,qBAAK,aAAL,CAAmB,IAAnB,CAAwB,KAAK,YAAL,CAAkB,aAAlB,EAAxB;AACD;AACF;;AAED,iBAAK,iBAAL;;AAEA;AACA,gBAAI,EAAE,KAAF,CAAQ,KAAK,aAAb,EAA4B,mBAAW;AACzC,qBAAQ,CAAC,QAAQ,KAAR,IAAiB,QAAQ,IAAR,KAAiB,aAAnC,KACA,EAAE,QAAQ,IAAR,IAAgB,QAAQ,IAAR,KAAiB,aAAnC,CADR;AAED,aAHG,CAAJ,EAGI;AACF,mBAAK,SAAL,CAAe,OAAf;AACD;AACF;;;yCAMc,M,EAAQ;AACrB,gBAAI,gBAAgB,SAAS,UAAT,CAAoB,MAApB,CAApB;AACA,mBAAO,KAAK,cAAL,CAAoB,aAApB,CAAP;AACD;;;qCAEU,M,EAAQ;AACjB,gBAAI,OAAO,IAAX;AACA,mBAAO,KAAK,cAAL,CAAoB,MAApB,EAA4B,IAA5B,CAAiC,kBAAU;AAChD,qBAAO,KAAK,mBAAL,CAAyB,EAAE,IAAF,CAAO,MAAP,CAAzB,EAAyC,IAAzC,CAAP;AACD,aAFM,CAAP;AAGD;;;oCAES,M,EAAQ,M,EAAQ;AACxB,gBAAI,OAAO,IAAX;AACA,mBAAO,KAAK,cAAL,CAAoB,MAApB,EAA4B,IAA5B,CAAiC,kBAAU;AAChD,qBAAO,KAAK,mBAAL,CAAyB,OAAO,MAAP,CAAzB,EAAyC,IAAzC,CAAP;AACD,aAFM,CAAP;AAGD;;;6CAEkB,O,EAAS,K,EAAO;AACjC,gBAAI,SAAS,KAAK,MAAL,CAAY,MAAzB;AACA,gBAAI,OAAO,IAAX;AACA,gBAAI,QAAQ,IAAR,KAAiB,WAArB,EAAkC;AAChC,qBAAO,KAAK,EAAL,CAAQ,IAAR,CAAa,CAClB,KAAK,YAAL,CAAkB,UAAlB,CAA6B,KAA7B,CADkB,EAElB,KAAK,YAAL,CAAkB,UAAlB,CAA6B,IAA7B,CAFkB,CAAb,CAAP;AAID;AACD,gBAAI,QAAQ,IAAR,KAAiB,UAArB,EAAiC;AAC/B,qBAAO,KAAK,EAAL,CAAQ,IAAR,CAAa,KAAK,YAAL,CAAkB,YAAlB,CAA+B,KAAK,SAApC,CAAb,CAAP;AACD;;AAED,gBAAI,QAAQ,IAAR,KAAiB,KAAjB,IAA0B,QAAQ,IAAR,KAAiB,aAA/C,EAA8D;AAC5D,qBAAO,KAAK,UAAL,CAAgB,MAAhB,EAAwB,IAAxB,CAA6B,mBAAW;AAC7C,wBAAQ,MAAR,CAAe,CAAf,EAAkB,CAAlB,EAAqB,QAAQ,IAAR,CAAa,KAAK,kBAAlB,CAArB;AACA,uBAAO,OAAP;AACD,eAHM,CAAP;AAID,aALD,MAKO,IAAI,QAAQ,IAAR,KAAiB,OAArB,EAA8B;AACnC,qBAAO,KAAK,SAAL,CAAe,MAAf,EAAuB,KAAK,aAAL,CAAmB,QAAQ,CAA3B,EAA8B,KAArD,CAAP;AACD;AACF;;;6CAIkB,Y,EAAc;AAC/B,gBAAI,OAAO,IAAX;AACA,cAAE,OAAF,CAAU,YAAV,EAAwB,uBAAe;AACrC,kBAAI,YAAY,SAAhB,EAA2B;AACzB,qBAAK,aAAL,CAAmB,IAAnB,CAAwB,KAAK,YAAL,CAAkB,YAAlB,CAA+B,YAAY,SAA3C,CAAxB;AACD;AACD,mBAAK,aAAL,CAAmB,IAAnB,CAAwB,KAAK,YAAL,CAAkB,MAAlB,CAAyB,YAAY,MAArC,CAAxB;AACA,mBAAK,aAAL,CAAmB,IAAnB,CAAwB,KAAK,YAAL,CAAkB,WAAlB,CAA8B,YAAY,QAA1C,CAAxB;AACA,mBAAK,aAAL,CAAmB,IAAnB,CAAwB,KAAK,YAAL,CAAkB,WAAlB,CAA8B,YAAY,KAA1C,CAAxB;AACD,aAPD;AAQA,iBAAK,WAAL,CAAiB,KAAK,aAAtB;AACD;;;8CAEmB;AAClB,gBAAI,IAAI,CAAR;AACA,gBAAI,aAAa,CAAjB;AACA,gBAAI,WAAW,KAAK,aAApB;AACA,gBAAI,eAAe,EAAnB;AACA,mBAAO,SAAS,MAAT,GAAkB,CAAlB,IAAuB,SAAS,CAAT,EAAY,IAAZ,KAAqB,aAAnD,EAAkE;AAChE,kBAAI,aAAa,MAAb,GAAsB,aAAa,CAAvC,EAA0C;AACxC,6BAAa,IAAb,CAAkB,EAAC,WAAW,EAAZ,EAAgB,QAAQ,EAAxB,EAA4B,UAAU,EAAtC,EAA0C,OAAO,EAAjD,EAAlB;AACD;AACD,kBAAI,SAAS,CAAT,EAAY,IAAZ,KAAqB,WAAzB,EAAsC;AACpC,6BAAa,UAAb,EAAyB,SAAzB,GAAqC,SAAS,CAAT,EAAY,KAAjD;AACD,eAFD,MAEO,IAAI,SAAS,CAAT,EAAY,IAAZ,KAAqB,KAAzB,EAAgC;AACrC,6BAAa,UAAb,EAAyB,MAAzB,GAAkC,SAAS,CAAT,EAAY,KAA9C;AACD,eAFM,MAEA,IAAI,SAAS,CAAT,EAAY,IAAZ,KAAqB,UAAzB,EAAqC;AAC1C,6BAAa,UAAb,EAAyB,QAAzB,GAAoC,SAAS,CAAT,EAAY,KAAhD;AACD,eAFM,MAEA,IAAI,SAAS,CAAT,EAAY,IAAZ,KAAqB,OAAzB,EAAkC;AACvC,6BAAa,UAAb,EAAyB,KAAzB,GAAiC,SAAS,CAAT,EAAY,KAA7C;AACA;AACD;AACD;AACD;AACD,iBAAK,MAAL,CAAY,YAAZ,GAA2B,YAA3B;AACD;;;8CAEmB,O,EAAS,e,EAAiB;AAAA;;AAC5C,gBAAI,WAAW,EAAE,GAAF,CAAM,EAAE,OAAF,CAAU,OAAV,CAAN,EAA0B,iBAAS;AAChD,qBAAO,OAAK,YAAL,CAAkB,UAAlB,CAA6B;AAClC,uBAAO,MAAM,QAAN,EAD2B;AAElC,4BAAY;AAFsB,eAA7B,CAAP;AAID,aALc,CAAf;;AAOA,gBAAI,eAAJ,EAAqB;AAAA;AAAA;AAAA;;AAAA;AACnB,qCAAqB,KAAK,WAAL,CAAiB,SAAtC,8HAAiD;AAAA,sBAAxC,QAAwC;;AAC/C,2BAAS,OAAT,CAAiB,KAAK,YAAL,CAAkB,UAAlB,CAA6B,EAAE,MAAM,UAAR,EAAoB,OAAO,MAAM,SAAS,IAA1C,EAAgD,YAAY,IAA5D,EAA7B,CAAjB;AACD;AAHkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIpB;AACD,mBAAO,QAAP;AACD;;;sCAEW,Q,EAAU;AACpB,gBAAI,QAAQ,SAAS,MAArB;AACA,gBAAI,cAAc,SAAS,KAAK,GAAL,CAAS,QAAM,CAAf,EAAkB,CAAlB,CAAT,CAAlB;;AAEA,gBAAI,CAAC,WAAD,IAAgB,YAAY,IAAZ,KAAqB,aAAzC,EAAwD;AACtD,uBAAS,IAAT,CAAc,KAAK,YAAL,CAAkB,aAAlB,EAAd;AACD;AACF;;;;QA1M+B,S;;;;AA8MlC,mBAAa,WAAb,GAA2B,4BAA3B","file":"query_ctrl.js","sourcesContent":["import angular from 'angular';\nimport _ from 'lodash';\nimport {QueryCtrl} from 'app/plugins/sdk';\nimport MQEQuery from './query_builder';\n\nexport class MQEQueryCtrl extends QueryCtrl {\n\n  constructor($scope, $injector, $q, uiSegmentSrv, templateSrv)  {\n    super($scope, $injector);\n\n    this.scope = $scope;\n    this.$q = $q;\n    this.uiSegmentSrv = uiSegmentSrv;\n    this.templateSrv = templateSrv;\n\n    this.operators = ['=', '!=', 'in', 'match'];\n    this.whereSegments = [];\n\n    var target_defaults = {\n      rawQuery: \"\",\n      whereClauses: []\n    };\n    _.defaults(this.target, target_defaults);\n\n    this.buildWhereSegments(this.target.whereClauses);\n    this.removeWhereSegment = uiSegmentSrv.newSegment({fake: true, value: '-- remove --'});\n\n    // bs-typeahead can't work with async code so we need to\n    // store metrics first.\n    this.availableMetrics = [];\n    this.updateMetrics();\n  }\n\n  invokeMQEQuery(query) {\n    return this.datasource._mqe_query(query).then(result => {\n      return result.body;\n    });\n  }\n\n  updateMetrics() {\n    var self = this;\n    this.invokeMQEQuery(MQEQuery.getMetrics()).then(metrics => {\n      self.availableMetrics = metrics;\n    });\n  }\n\n  // Event handlers\n\n  onChangeInternal() {\n    this.panelCtrl.refresh(); // Asks the panel to refresh data.\n  }\n\n  toggleEditorMode() {\n    this.target.rawQuery = !this.target.rawQuery;\n  }\n\n  getCollapsedText() {\n    return this.target.rawQuery;\n  }\n\n  whereSegmentUpdated(segment, index) {\n    this.whereSegments[index] = segment;\n\n    if (segment.value === this.removeWhereSegment.value) {\n      this.whereSegments.splice(index, 3);\n      if (this.whereSegments.length === 0) {\n        this.whereSegments.push(this.uiSegmentSrv.newPlusButton());\n      } else if (this.whereSegments.length > 2) {\n        this.whereSegments.splice(Math.max(index - 1, 0), 1);\n        if (this.whereSegments[this.whereSegments.length - 1].type !== 'plus-button') {\n          this.whereSegments.push(this.uiSegmentSrv.newPlusButton());\n        }\n      }\n    } else {\n      if (segment.type === 'plus-button') {\n        if (index > 2) {\n          this.whereSegments.splice(index, 0, this.uiSegmentSrv.newCondition('AND'));\n        }\n        this.whereSegments.push(this.uiSegmentSrv.newOperator('='));\n        this.whereSegments.push(this.uiSegmentSrv.newFake('select tag value', 'value', 'query-segment-value'));\n        segment.type = 'key';\n        segment.cssClass = 'query-segment-key';\n      }\n      if ((index + 1) === this.whereSegments.length) {\n        this.whereSegments.push(this.uiSegmentSrv.newPlusButton());\n      }\n    }\n\n    this.buildWhereClauses();\n\n    // Refresh only if all fields setted\n    if (_.every(this.whereSegments, segment => {\n      return ((segment.value || segment.type === 'plus-button') &&\n              !(segment.fake && segment.type !== 'plus-button'));\n    })) {\n      this.panelCtrl.refresh();\n    }\n  }\n\n  ///////////////////////\n  // Query suggestions //\n  ///////////////////////\n\n  describeMetric(metric) {\n    var describeQuery = MQEQuery.getColumns(metric);\n    return this.invokeMQEQuery(describeQuery);\n  }\n\n  getColumns(metric) {\n    var self = this;\n    return this.describeMetric(metric).then(result => {\n      return self.transformToSegments(_.keys(result), true);\n    });\n  }\n\n  getValues(metric, column) {\n    var self = this;\n    return this.describeMetric(metric).then(result => {\n      return self.transformToSegments(result[column], true);\n    });\n  }\n\n  getColumnsOrValues(segment, index) {\n    var metric = this.target.metric;\n    var self = this;\n    if (segment.type === 'condition') {\n      return this.$q.when([\n        this.uiSegmentSrv.newSegment('AND'),\n        this.uiSegmentSrv.newSegment('OR')\n      ]);\n    }\n    if (segment.type === 'operator') {\n      return this.$q.when(this.uiSegmentSrv.newOperators(this.operators));\n    }\n\n    if (segment.type === 'key' || segment.type === 'plus-button') {\n      return this.getColumns(metric).then(columns => {\n        columns.splice(0, 0, angular.copy(self.removeWhereSegment));\n        return columns;\n      });\n    } else if (segment.type === 'value') {\n      return this.getValues(metric, this.whereSegments[index - 2].value);\n    }\n  }\n\n  ///////////////////////\n\n  buildWhereSegments(whereClauses) {\n    var self = this;\n    _.forEach(whereClauses, whereClause => {\n      if (whereClause.condition) {\n        self.whereSegments.push(self.uiSegmentSrv.newCondition(whereClause.condition));\n      }\n      self.whereSegments.push(self.uiSegmentSrv.newKey(whereClause.column));\n      self.whereSegments.push(self.uiSegmentSrv.newOperator(whereClause.operator));\n      self.whereSegments.push(self.uiSegmentSrv.newKeyValue(whereClause.value));\n    });\n    this.fixSegments(this.whereSegments);\n  }\n\n  buildWhereClauses() {\n    var i = 0;\n    var whereIndex = 0;\n    var segments = this.whereSegments;\n    var whereClauses = [];\n    while (segments.length > i && segments[i].type !== 'plus-button') {\n      if (whereClauses.length < whereIndex + 1) {\n        whereClauses.push({condition: '', column: '', operator: '', value: ''});\n      }\n      if (segments[i].type === 'condition') {\n        whereClauses[whereIndex].condition = segments[i].value;\n      } else if (segments[i].type === 'key') {\n        whereClauses[whereIndex].column = segments[i].value;\n      } else if (segments[i].type === 'operator') {\n        whereClauses[whereIndex].operator = segments[i].value;\n      } else if (segments[i].type === 'value') {\n        whereClauses[whereIndex].value = segments[i].value;\n        whereIndex++;\n      }\n      i++;\n    }\n    this.target.whereClauses = whereClauses;\n  }\n\n  transformToSegments(results, addTemplateVars) {\n    var segments = _.map(_.flatten(results), value => {\n      return this.uiSegmentSrv.newSegment({\n        value: value.toString(),\n        expandable: false\n      });\n    });\n\n    if (addTemplateVars) {\n      for (let variable of this.templateSrv.variables) {\n        segments.unshift(this.uiSegmentSrv.newSegment({ type: 'template', value: '$' + variable.name, expandable: true }));\n      }\n    }\n    return segments;\n  }\n\n  fixSegments(segments) {\n    var count = segments.length;\n    var lastSegment = segments[Math.max(count-1, 0)];\n\n    if (!lastSegment || lastSegment.type !== 'plus-button') {\n      segments.push(this.uiSegmentSrv.newPlusButton());\n    }\n  }\n\n}\n\nMQEQueryCtrl.templateUrl = 'partials/query.editor.html';\n"]}